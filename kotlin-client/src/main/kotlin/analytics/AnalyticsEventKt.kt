// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: analytics.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package analytics;

@kotlin.jvm.JvmName("-initializeanalyticsEvent")
public inline fun analyticsEvent(block: analytics.AnalyticsEventKt.Dsl.() -> kotlin.Unit): analytics.Analytics.AnalyticsEvent =
  analytics.AnalyticsEventKt.Dsl._create(analytics.Analytics.AnalyticsEvent.newBuilder()).apply { block() }._build()
/**
 * ```
 * Definicion del mensaje que queremos estandarizar para manejo de analitica en nuestros diferentes stack tecnologico.
 * Tecnologias soportadas actualmente: JavaScript, TypeScript, Swift, Java y Kotlin
 * ```
 *
 * Protobuf type `analytics.AnalyticsEvent`
 */
public object AnalyticsEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: analytics.Analytics.AnalyticsEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: analytics.Analytics.AnalyticsEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): analytics.Analytics.AnalyticsEvent = _builder.build()

    /**
     * `string event_type = 1;`
     */
    public var eventType: kotlin.String
      @JvmName("getEventType")
      get() = _builder.eventType
      @JvmName("setEventType")
      set(value) {
        _builder.eventType = value
      }
    /**
     * `string event_type = 1;`
     */
    public fun clearEventType() {
      _builder.clearEventType()
    }

    /**
     * `string user_id = 2;`
     */
    public var userId: kotlin.String
      @JvmName("getUserId")
      get() = _builder.userId
      @JvmName("setUserId")
      set(value) {
        _builder.userId = value
      }
    /**
     * `string user_id = 2;`
     */
    public fun clearUserId() {
      _builder.clearUserId()
    }

    /**
     * `string timestamp = 3;`
     */
    public var timestamp: kotlin.String
      @JvmName("getTimestamp")
      get() = _builder.timestamp
      @JvmName("setTimestamp")
      set(value) {
        _builder.timestamp = value
      }
    /**
     * `string timestamp = 3;`
     */
    public fun clearTimestamp() {
      _builder.clearTimestamp()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class AttributesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `map<string, string> attributes = 4;`
     */
     public val attributes: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, AttributesProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getAttributesMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.attributesMap
      )
    /**
     * `map<string, string> attributes = 4;`
     */
    @JvmName("putAttributes")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, AttributesProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putAttributes(key, value)
       }
    /**
     * `map<string, string> attributes = 4;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setAttributes")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, AttributesProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * `map<string, string> attributes = 4;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeAttributes")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, AttributesProxy>
      .remove(key: kotlin.String) {
         _builder.removeAttributes(key)
       }
    /**
     * `map<string, string> attributes = 4;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllAttributes")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, AttributesProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllAttributes(map)
       }
    /**
     * `map<string, string> attributes = 4;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearAttributes")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, AttributesProxy>
      .clear() {
         _builder.clearAttributes()
       }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun analytics.Analytics.AnalyticsEvent.copy(block: `analytics`.AnalyticsEventKt.Dsl.() -> kotlin.Unit): analytics.Analytics.AnalyticsEvent =
  `analytics`.AnalyticsEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

